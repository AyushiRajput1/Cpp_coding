/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* lcaDeepestLeaves(TreeNode* root) 
    {
        TreeNode *r=NULL;

        if(root->left==NULL && root->right==NULL)
            return root;

        else
        {
           unordered_map<TreeNode*,TreeNode*> m;
           queue<TreeNode*> q;
           vector<TreeNode*> v;
           q.push(root);
           m[root]=NULL;

           while(!q.empty())
           {
               int size=q.size();
               vector<TreeNode*> l(size);
               
               for(int k=0;k<size;k++)
               {
                    TreeNode *t=q.front();
                    l[k]=t;
                    q.pop();

                    if(t->left)
                    {
                        q.push(t->left);
                        m[t->left]=t;
                    }    
                    if(t->right)
                    {
                        q.push(t->right);
                        m[t->right]=t;
                    }
               }
               
               v=l;
           }
            
            if(v.size()==1)
                return v[0];
            else
            {
                while(1)
                {
                    TreeNode* curr=v[0];
                    bool change=false;
                    for(int i=1;i<v.size();i++)
                    {
                        if(v[i]!=curr)  
                        { 
                            change=true;
                            break; 
                        }
                    }

                    if(change==false)
                        return curr;
                    else
                    {
                        for(int i=0;i<v.size();i++)
                            v[i]=m[v[i]]; 
                    }
                }   
            }
        }
     
     return NULL;

    }
   
};