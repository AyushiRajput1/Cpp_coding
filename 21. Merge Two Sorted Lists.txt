class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
        if(list1==NULL)
            return list2;
        if(list2==NULL)
            return list1;

        ListNode* temp=new ListNode(0);
        if(list1->val <= list2->val)
        {
            list1->next=mergeTwoLists(list1->next,list2);
        }
        else
        {
            temp->val=list2->val;
            temp->next=list1;
            list1=temp;
            list2=list2->next;
            mergeTwoLists(list1,list2);
        }
        return list1;
    }
};


//modified
//O( m + n )
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
        if(list1==NULL)
            return list2;
        if(list2==NULL)
            return list1;

        ListNode* temp=new ListNode(0);
        if(list1->val <= list2->val)
        {
            list1->next=mergeTwoLists(list1->next,list2);
            return list1;
        }
        else
        {
          list2->next=mergeTwoLists(list1,list2->next);
          return list2;
        }
    }
};