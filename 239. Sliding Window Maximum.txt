//O(N*N)
TLE

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) 
    {
        vector<int> v;
        
        if(nums.size()==1)
            return {nums[0]};
        for(int i=0;i<=nums.size()-k;i++)
        {
            int x=*max_element(nums.begin()+i,nums.begin()+i+k);
            v.push_back(x);
        }
        return v;
    }
};

----------------
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) 
    {
        vector<int> v;
        deque<int> s;
        
        for(int i=0;i<k;i++)
        {
            
            while(!s.empty() && nums[s.back()]<nums[i])
                s.pop_back();
            
            
            s.push_back(i);
        }
        
        for(int i=k;i<nums.size();i++)
        {
            v.push_back(nums[s.front()]);
            while((!s.empty())&&(s.front()<=i-k))
                s.pop_front();
            while(!s.empty() && nums[s.back()]<=nums[i])
            s.pop_back();
            
            s.push_back(i);
        }
        
        v.push_back(nums[s.front()]);
        return v;
    }
};