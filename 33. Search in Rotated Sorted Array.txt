TC:O(N)

class Solution {
public:
    int search(vector<int>& nums, int target) 
    {
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==target)
                return i;
        }
        
        return -1;
       
    }
};


-------------------------------------------------
int search(vector<int>& nums, int target) 
    {
        int n=nums.size();
        int k=min_element(nums.begin(),nums.end())-nums.begin();
        
        int i=0,j=n-1,e=k-1,s=k;
        if(target==nums[0])
                return 0;
        else if(nums[n-1]==target)
                return n-1;
        else if(k>0 && (target>=nums[i] && target<=nums[e]))
        {
            while(i<=e)
            {
                int mid=(i+e)/2;
                if(nums[mid]==target)
                    return mid;
                else if(nums[mid]>target)
                    e=mid-1;
                else if(nums[mid]<target)
                    i=mid+1;
            }
        }
        else if(target>=nums[s] && target<=nums[j])
        {
            while(s<=j)
            {
                int mid=(j+s)/2;
                if(nums[mid]==target)
                    return mid;
                else if(nums[mid]>target)
                    j=mid-1;
                else if(nums[mid]<target)
                    s=mid+1;
            }
        }
        
        
        return -1;
       
        
    }
};

-----------------------------------------------------
//optimal
Tc:O(log n)
public:
    int search(vector<int>& nums, int target) 
    {
        int n=nums.size();
        
        int l=0,h=n-1,mid;
        while(l<=h)
        {
            mid=(l+h)/2;
            if(target==nums[mid])
                return mid;
            else if(nums[l]<=nums[mid])//left sorted
            {
                if(target>=nums[l] && target<=nums[mid])
                    h=mid-1;
                else
                    l=mid+1;
            }
            else //right sorted
            {
                if(target>=nums[mid] && target<=nums[h])
                    l=mid+1;
                else
                    h=mid-1;
            }
        }
        return -1;
       
        
    }
};