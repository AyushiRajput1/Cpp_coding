//Time Complexity:
//The time complexity of this approach is O(n log n) due to the sorting
//operation, where n is the number of intervals. The for loop takes 
//O(n) time to iterate over all intervals, and the inner operations 
//take constant time.

//Space Complexity:
//The space complexity of this approach is O(n) to store the answer 
//vector and the temporary vector.


class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) 
    {
        vector<vector<int>> v;

        if(intervals.size()==0)
            return v;
        sort(intervals.begin(),intervals.end());
        vector<int> t=intervals[0];
        for(int i=0;i<intervals.size();i++)
        {
            if(intervals[i][0]<=t[1])
            {
                t[1]=max(intervals[i][1],t[1]);
            }
            else
            {
                v.push_back(t);
                t=intervals[i];
            }        
        }
        v.push_back(t);
        return v;
    }
};