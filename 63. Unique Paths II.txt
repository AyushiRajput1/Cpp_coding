Approach-1 : Use recursion and dynamic programming
TC- O(MxN), recursion
SC- O(MxN), dp/mxn matrix

class Solution {
public:
    
    int uniqpath(int i, int j, int m, int n,vector<vector<int>>& grid,vector<vector<int>>&dp)
    {
        if(i==(m-1) && j==(n-1) && grid[i][j] == 0)
                return 1;
        
        if(i>=m || j>=n || grid[i][j] == 1)
            return 0;
        
        if(dp[i][j]!=-1)
                return dp[i][j];
        
        return dp[i][j]=uniqpath(i+1,j,m,n,grid,dp)+uniqpath(i,j+1,m,n,grid,dp);
        
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) 
    {
        vector<vector<int>>dp(obstacleGrid.size(),vector<int>(obstacleGrid[0].size(),-1));
        return uniqpath(0,0,obstacleGrid.size(),obstacleGrid[0].size(),obstacleGrid,dp);
    }
};