class Solution {
public:
    vector<int> v1,v2;
    void inorder1(TreeNode* root) 
    {
        if((root->left==NULL) && (root->right==NULL))
            v1.push_back(root->val);
        if(root->left)
            inorder1(root->left);
        if(root->right)
            inorder1(root->right);
    }
    void inorder2(TreeNode* root) 
    {
        if(root->left ==NULL && root->right==NULL)
            v2.push_back(root->val);
        if(root->left)
            inorder2(root->left);
        if(root->right)
            inorder2(root->right);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) 
    {
        if((root1==NULL)&&(root2==NULL))
            return true;
        else if((root1==NULL)&&(root2!=NULL)||(root1!=NULL)&&(root2==NULL))
            return false;

        inorder1(root1);
        inorder2(root2);

        if(v1==v2)
            return true;
        else
            return false;


    }
};


-------------------------------------------------------------------------------------------------
class Solution {
public:
 
    void inorder1(TreeNode* root,vector<int> &v) 
    {
        if((root->left==NULL) && (root->right==NULL))
            v.push_back(root->val);
        if(root->left)
            inorder1(root->left,v);
        if(root->right)
            inorder1(root->right,v);
    }
    
    bool leafSimilar(TreeNode* root1, TreeNode* root2) 
    {
        vector<int> v1,v2;
        if((root1==NULL)&&(root2==NULL))
            return true;
        else if((root1==NULL)&&(root2!=NULL)||(root1!=NULL)&&(root2==NULL))
            return false;

        inorder1(root1,v1);
        inorder1(root2,v2);

        if(v1==v2)
            return true;
        else
            return false;


    }
};