class Solution{
  public:
  
  void inorder(Node*root,vector<int> &v)
  {
      if(root==NULL)
        return;
        
      inorder(root->left,v);
      v.push_back(root->data);
      inorder(root->right,v);
    
  }
  void solve(Node*root,vector<int> &v,int &i)
  {
      if(root==NULL)
        return;
        
      solve(root->left,v,i);
      root->data=v[i++];
      solve(root->right,v,i);
    
  }
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    Node *binaryTreeToBST (Node *root)
    {
        vector<int> v;
        inorder(root,v);
        sort(v.begin(),v.end());
        
        int i=0;
        solve(root,v,i);
        
        return root;
    }
};



------------------
class Solution{
  public:
    //Back-end complete function template for C++
    
    void getArr(int arr[],int *index,Node *root)
    {
        if(root==NULL)
            return ;
        getArr(arr,index,root->left);
        arr[*index]=root->data;
        *index+=1;
        getArr(arr,index,root->right);
    }
    
    
    void convert(Node *root,int arr[],int *index)
    {
        if(root==NULL)
            return ;
    
        convert(root->left,arr,index);
        root->data=arr[*index];
        *index+=1;
        convert(root->right,arr,index);
    }
    
    Node *  binaryTreeToBST (Node *root)
    {
        if(root==NULL)
            return NULL ;
        int *arr=new int[1000];
        int index=0;
        getArr(arr,&index,root);
        sort(arr,arr+index);
        index=0;
        convert(root,arr,&index);
        return root;
    }
};