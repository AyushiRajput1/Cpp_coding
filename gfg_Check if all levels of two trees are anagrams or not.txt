
Time Complexity: O(N^2), where n is the number of nodes.
Space Complexity: O((N)), for queue

class Solution{
    public:
    
    bool areAnagrams(Node *root1, Node *root2)
    {
        queue<Node*> q1;
        queue<Node*> q2;
    
        q1.push(root1);
        q2.push(root2);
        
        vector<int> v1;
        vector<int> v2;
        
        while(!q1.empty() && !q2.empty())
        {
            
            int s1=q1.size();
            int s2=q2.size();
            
            if(s1!=s2)
                return 0;
            
          for(int i=0;i<s1;i++)  //traversing each evel
          {
              Node* t=q1.front();
              q1.pop();
            if(t->left!=NULL)
                q1.push(t->left);
            if(t->right!=NULL)
                q1.push(t->right);
            v1.push_back(t->data);
            

            Node* j=q2.front();
            q2.pop();
            if(j->left!=NULL)
                q2.push(j->left);
            if(j->right!=NULL)
                q2.push(j->right);
                    
            v2.push_back(j->data);
          }
          
          if(v1.size()!=v2.size())
            return 0;
                    
          sort(v1.begin(),v1.end());
          sort(v2.begin(),v2.end());
                    
          if(v1!=v2)
             return 0;
                
        }
        
                    
        return 1;
    }
};

-----------------
//using map

queue <Node*> q1,q2;
q1.push(r1);
q2.push(r2);
while(!q1.empty()){
    int s1 = q1.size(),s2 = q2.size();
    if(s1 != s2) return 0;
    unordered_map <int,int> m1,m2;
    for(int i = 0;i < s1;i++){
        Node* t1 = q1.front();
        Node* t2 = q2.front();
        m1[t1->data]++;
        m2[t2->data]++;
        q1.pop();
        q2.pop();
        if(t1->left) q1.push(t1->left);
        if(t1->right) q1.push(t1->right);
        if(t2->left) q2.push(t2->left);
        if(t2->right) q2.push(t2->right);
    }
    if(m1 != m2) return 0;
}
return 1;



---------------------------
//optimized
Time Complexity: O(NlogN), where n is the number of nodes.  
Space Complexity: O(N), as we are using extra queue data structure in level order traversal.


//Back-end complete function Template for C++

class Solution{
    public:
bool areAnagrams(Node *root1, Node *root2)
{
    // Base Cases
    if (root1 == NULL && root2 == NULL)
        return true;
    if (root1 == NULL || root2 == NULL)
        return false;
 
    // start level order traversal of two trees
    // using two queues.
    queue<Node *> q1, q2;
    q1.push(root1);
    q2.push(root2);
 
    while (1)
    {
        // n1 (queue size) indicates number of Nodes
        // at current level in first tree and n2 indicates
        // number of nodes in current level of second tree.
        int n1 = q1.size(), n2 = q2.size();
 
        // If n1 and n2 are different
        if (n1 != n2)
            return false;
 
        // If level order traversal is over 
        if (n1 == 0)
            break;
 
        // Dequeue all Nodes of current level and
        // Enqueue all Nodes of next level
        vector<int> curr_level1, curr_level2;
        while (n1 > 0)
        {
            Node *node1 = q1.front();
            q1.pop();
            if (node1->left != NULL)
                q1.push(node1->left);
            if (node1->right != NULL)
                q1.push(node1->right);
            n1--;
 
            Node *node2 = q2.front();
            q2.pop();
            if (node2->left != NULL)
                q2.push(node2->left);
            if (node2->right != NULL)
                q2.push(node2->right);
 
            curr_level1.push_back(node1->data);
            curr_level2.push_back(node2->data);
        }
 
        // Check if nodes of current levels are
        // anagrams or not.
        sort(curr_level1.begin(), curr_level1.end());
        sort(curr_level2.begin(), curr_level2.end());
        if (curr_level1 != curr_level2)
            return false;
    }
 
    return true;
}
};