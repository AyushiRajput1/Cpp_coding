class Solution{
  public:
  
    //Function to find starting point where the truck can start to get through
    //the complete circle without exhausting its petrol in between.
    int tour(petrolPump p[],int n)
    {
        int balance=0;
        int deficit=0;
        int start=0;
        for(int i=0;i<n;i++)
        {
            balance+=p[i].petrol-p[i].distance;
            if(balance<0)
            {
                deficit+=balance;
                balance=0;
                start=i+1;
            }
        }
        
        if(deficit+balance>=0)
            return start;
        else
            return -1;
    }
};


---------------------------------------------
Time Complexity: O(N)
Auxiliary Space: O(1)


First Circular Tour Using Queue:
Instead of checking the whole array for each starting point, we can store the current tour inside a queue. 

At the moment, the current amount of petrol becomes inefficient (i.e., negative) to reach the next petrol pump, remove the current starting point from the queue and consider the next point as the new starting point.

Instead of building a separate queue, we can use the array itself as a queue with the help of start and end pointers.

Note: Each petrol pump will be added in the queue at most twice and will be removed at most once.
Follow the below steps to implement the idea:

Set two pointers, start = 0 and end = 1 to use the array as a queue.
If the amount of petrol is efficient to reach the next petrol pump then increment the end pointer (circularly).
Otherwise, remove the starting point of the current tour, i.e., increment the start pointer.
If the start pointer reaches N then such a tour is not possible. Otherwise, return the starting point of the tour.

// C++ program to find circular tour for a truck 
#include <bits/stdc++.h>
using namespace std; 

// A petrol pump has petrol and distance to next petrol pump 
class petrolPump 
{
    public:
    int petrol; 
    int distance; 
}; 

// The function returns starting point if there is a possible solution, 
// otherwise returns -1 
int printTour(petrolPump arr[], int n) 
{ 
    // Consider first petrol pump as a starting point 
    int start = 0; 
    int end = 1; 

    int curr_petrol = arr[start].petrol - arr[start].distance; 

    /* Run a loop while all petrol pumps are not visited. 
    And we have reached first petrol pump again with 0 or more petrol */
    while (end != start || curr_petrol < 0) 
    { 
        // If current amount of petrol in truck becomes less than 0, then 
        // remove the starting petrol pump from tour 
        while (curr_petrol < 0 && start != end) 
        { 
            // Remove starting petrol pump. Change start 
            curr_petrol -= arr[start].petrol - arr[start].distance; 
            start = (start + 1) % n; 

            // If 0 is being considered as start again, then there is no 
            // possible solution 
            if (start == 0) 
            return -1; 
        } 

        // Add a petrol pump to current tour 
        curr_petrol += arr[end].petrol - arr[end].distance; 

        end = (end + 1) % n; 
    } 

    // Return starting point 
    return start; 
} 

// Driver code 
int main() 
{ 
    petrolPump arr[] = {{6, 4}, {3, 6}, {7, 3}}; 

    int n = sizeof(arr)/sizeof(arr[0]); 
    int start = printTour(arr, n); 

    (start == -1)? cout<<"No solution": cout<<"Start = "<<start; 

    return 0; 
} 
