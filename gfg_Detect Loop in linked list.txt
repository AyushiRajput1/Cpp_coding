Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

class Solution
{
    public:
    //Function to check if the linked list has a loop.
    bool detectLoop(Node* head)
    {
        set<Node*> s;
        while(head!=NULL)
        {
            if(s.find(head)!=s.end())
            {
                return true;
            }
            s.insert(head);
               head=head->next;
        }
        return false;
    }
};
-----------------
/ time complexity = O(n) space= O(1)

// floyds algorithms

// we have used two pointers fast and slow,fast incremented by 2 node and slow is incremented by 1 node
// whenever they both becomes same there is definately a loop exits.


class Solution
{
    public:
    //Function to check if the linked list has a loop.
    bool detectLoop(Node* head)
    {
        
        if(head == NULL || head->next == NULL)
            return 0;
        
        Node* fast = head;
        Node* slow = head;
        while(slow != NULL && fast!= NULL)
        {
            
            fast = fast->next;
            if(fast!= NULL)
                fast = fast->next;
            
            slow = slow->next;
            if(fast == slow) 
                return true;
         }
         return false;
    }
};