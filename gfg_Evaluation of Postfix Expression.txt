class Solution
{
    public:
    //Function to evaluate a postfix expression.
    int evaluatePostfix(string S)
    {
        stack<int> s;
        for(int i=0;i<S.length();i++)
        {
            char ch=S[i];
            
            if(isdigit(ch))
                s.push((int)ch-'0');
            else
            {
                int x=s.top();
                s.pop();
                int y=s.top();
                s.pop();
                
                if(ch=='+')
                    s.push(x+y);
                else if(ch=='*')
                    s.push(x*y);
                else if(ch=='-')
                   s.push(y-x);
                else if(ch=='/')
                    s.push(y/x);
                
            }
        }
        return s.top();
    }
};



-----------------------------------------------------------------------------------------
Time Complexity : O(|S|), for traversing the given string of length S.
Space Complexity : O(|S|), for storing the value in stack, which can be of length S.
//Back-end complete function Template for C

// The main function that returns value of a given postfix expression
int evaluatePostfix(char* exp)
{
    // Create a stack of capacity equal to expression size
    struct Stack* stack = createStack(strlen(exp));
    int i;
  
    // See if stack was created successfully
    if (!stack) return -1;
  
    // Scan all characters one by one
    for (i = 0; exp[i]; ++i)
    {
        // If the scanned character is an operand (number here),
        // push it to the stack.
        if (isdigit(exp[i]))
            push(stack, exp[i] - '0');
  
        // If the scanned character is an operator, pop two
        // elements from stack apply the operator
        else
        {
            int val1 = pop(stack);
            int val2 = pop(stack);
            switch (exp[i])
            {
            case '+': push(stack, val2 + val1); break;
            case '-': push(stack, val2 - val1); break;
            case '*': push(stack, val2 * val1); break;
            case '/': push(stack, val2/val1); break;
            }
        }
    }
    return pop(stack);
} 