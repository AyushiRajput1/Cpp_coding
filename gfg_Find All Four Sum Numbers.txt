void findFourElements(int A[], int n, int X)
{
     
// Fix the first element and find other three
for (int i = 0; i < n - 3; i++)
{
    // Fix the second element and find other two
    for (int j = i + 1; j < n - 2; j++)
    {
         
        // Fix the third element and find the fourth
        for (int k = j + 1; k < n - 1; k++)
        {
            // find the fourth
            for (int l = k + 1; l < n; l++)
            if (A[i] + A[j] + A[k] + A[l] == X)
                cout << A[i] <<", " << A[j]
                     << ", " << A[k] << ", " << A[l];
        }
    }
}
}


Time Complexity: O(n^4)
Auxiliary Space: O(1)

----------------------------------------------------------
class Solution{
    public:
           
    // arr[] : int input array of integers
    // k : the quadruple sum required
    vector<vector<int> > fourSum(vector<int> &arr, int k) {
       
       //sorting the array
       sort(arr.begin(), arr.end());
       
       // creating vector
       set<vector<int>>s;
       vector<vector<int>>ans;
       
       for(int i=0; i<arr.size()-3; i++)
       {
           for(int j=i+1; j<arr.size()-2; j++)
           {
               int m = j+1;
               int n = arr.size()-1;
               
               while(m < n)
               {
                   if((arr[i] + arr[j] + arr[m] + arr[n]) < k) {
                   m++; 
                   }
                   
                   else if((arr[i] + arr[j] + arr[m] + arr[n]) > k) {
                   n--; 
                   }
                   
                   else if((arr[i] + arr[j] + arr[m] + arr[n]) == k)
                   {
                       s.insert({arr[i], arr[j], arr[m],arr[n]});
                       m++;
                       n--;
                   }
                   
               }
           }
       }
       for(auto i:s)
       {
           ans.push_back(i);
       }
       return ans;
       
   }
};


Time Complexity : O(n^3)
Auxiliary Space: O(1)