Time Complexity: O(N)  Time complexity will be the same as that of a morris's traversal
Space Complexity: O(N)

class Solution
{
    void preorder(Node* root,vector<Node*> &v)
    {
        if(root==NULL)
            return;
        v.push_back(root);
        preorder(root->left,v);
        preorder(root->right,v);
    }
    public:
    void flatten(Node *root)
    {
        vector< Node*> v;
        preorder(root,v);
        
        for(int i=0;i<v.size()-1;i++)
        {
            v[i]->left=NULL;
            v[i]->right=v[i+1];
        }
    }
};


--------------------------------------------
class Solution
{
    public:
    Node * prv=NULL;
    void flatten(Node *root)
    {
        if(root==NULL) return ;
        
        
        flatten(root->right);
        flatten(root->left);
        
        root->right=prv;
        root->left=NULL;
        prv=root;
    }


};

-----------------------------------------
Time Complexity: O(N)  Time complexity will be the same as that of a morris's traversal
Space Complexity: O(1)


class Solution
{
    public:
    void flatten(Node *root)
    {
        if (root == NULL || root->left == NULL &&
	        root->right == NULL) {
		return;
	}

	// if root->left exists then we have
	// to make it root->right
	if (root->left != NULL) {

		// move left recursively
		flatten(root->left);

		// store the node root->right
		struct Node* tmpRight = root->right;
		root->right = root->left;
		root->left = NULL;

		// find the position to insert
		// the stored value
		struct Node* t = root->right;
		while (t->right != NULL) {
			t = t->right;
		}

		// insert the stored value
		t->right = tmpRight;
	}

	// now call the same function
	// for root->right
	flatten(root->right);
    }
};