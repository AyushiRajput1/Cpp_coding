class Solution{
public:
    int minValue(string s, int k)
    {
        queue<int> q;
        vector<int> v;
        int count=0,r=0;
        
        sort(s.begin(),s.end());
        q.push(s[0]);
       
        for(int i=0;i<s.size();i++)
        {
            char c=q.front();
            if(s[i]==c)
                count++;
            else
            {
                q.pop();
                v.push_back(count);
                count=1;
                q.push(s[i]);
            }
        }
        
        v.push_back(count);
        
        while(k)
        {
            sort(v.begin(),v.end(),greater<int>());
            v[0]--;
            k--;
        }
        
        for(int i=0;i<v.size();i++)
            r+=pow(v[i],2);
        
        
       return r;
    }
};



-------------------------------------------------
Expected Time Complexity: O(N+Klog(P))  where N is the length of string and P is number of distinct alphabets and K number of alphabets to be removed 
Expected Auxiliary Space: O(N)


//Back-end complete function Template for C++

class Solution{
public:
    int minValue(string s, int k){
        map<char, int> mp;
        priority_queue<int> pq;
        for(int i = 0;i < s.size();i++)
            mp[s[i]]++;
        for(auto it = mp.begin();it != mp.end();it++)
            pq.push(it->second);
        while(k--){
            int x = pq.top();
            x--;
            pq.pop();
            pq.push(x);
        }
        int result = 0;
        while(!pq.empty()){
            int x = pq.top();
            pq.pop();
            result += (x*x);
        }
        return result;
    }
};