Time Complexity: O(N)
Auxiliary Space: O(N)

class Solution{
  public:
     // Function to find majority element in the array
    // a: input array
    // size: size of input array
    int majorityElement(int a[], int size)
    {
        map<int,int> m;
        for(int i=0;i<size;i++)
        {
            m[a[i]]++;
        }
        
        for(auto i:m)
        {
            if(i.second > size/2)
                return i.first;
        }
        return -1;
    }
};

----------------------------------------------------------
Mooreâ€™s Voting Algorithm:
Time Complexity: O(N)
Auxiliary Space: O(1)

class Solution{
  public:
    /* Function to print Majority Element */
    int majorityElement(int a[], int size)
    {
        int ele = 0, count = 0; 
        
        
        for (int i=0;i<size;i++) 
        { 
            if (count == 0) 
            {  
                //count = 1; 
                ele=a[i];
            }
            if (ele == a[i]) 
                count++; 
            else
                count--;  
        } 
        
        count = 0; 
        for (int i = 0; i < size; i++) 
            if (a[i] == ele) 
                count++; 
              
        if (count > size/2) 
            return ele; 
          
        else
            return -1;
    }

};
-------------------------------------------------------------
Time Complexity: O(NlogN)
Auxiliary Space: O(1)

class Solution{
  public:
     // Function to find majority element in the array
    // a: input array
    // size: size of input array
    int majorityElement(int a[], int size)
    {
        sort(a,a+size);//O(NlogN)
        int c=0;
        
        for(int i=0;i<size;i++)
        {
           c++;
           if(a[i+1]!=a[i])
           {
               if(c > size/2)
                    return a[i];
                else
                    c=0;
           }
        }
        
        
        return -1;
    }
};

