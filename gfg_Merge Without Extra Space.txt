
TLE

class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
           for(int i=0;i<n;i++)
           {
               int j=0;
               if(arr1[i]>arr2[j])
                    swap(arr1[i],arr2[j]);
               
                sort(arr1,arr1+n);
                sort(arr2,arr2+m);
           }
        } 
};


--------------------------------------
Time Complexity: The time complexity while traversing the arrays in while loop is O(n+m) 
in worst case and sorting is O(nlog(n) + mlog(m)). So overall time complexity of the code 
becomes O((n+m)log(n+m)).
Space Complexity: As the function doesn't use any extra array for any operations, the space 
complexity is O(1)




class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
           int i = 0, j = 0, k = n - 1;
  
        // Until i less than equal to k
        // or j is less than m
        while (i <= k && j < m) 
        {
            if (arr1[i] < arr2[j])
                i++;
            else {
                swap(arr2[j++], arr1[k--]);
            }
        }
  
        // Sort first array
        sort(arr1, arr1 + n);
  
        // Sort second array
        sort(arr2, arr2 + m);
        }
};