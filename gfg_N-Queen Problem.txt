//Expected Time Complexity: O(n!)
//Expected Auxiliary Space: O(n2)

proper commented slution-https://www.geeksforgeeks.org/printing-solutions-n-queen-problem/

class Solution{
public:
    vector<int> v;
    vector<vector<int>> r;
   bool issafe(vector<vector<int>> &board,int r,int c,int n)
    {
        //checking abve column
        for(int i=0;i<r;i++)
        {
            if(board[i][c]==1)
                return false;
        }


        int i=r,j=c;
        while(i>=0 && j<n)//check right diagonal
        {
            if(board[i][j]==1)
                return false;
            i--;
            j++;
        }


        i=r,j=c;
        while(i>=0 && j>=0)//chk left diagonal
        {
            if(board[i][j]==1)
                return false;
            i--;
            j--;
        }
        
        return true;
            
    }
    
    void solvenqueen(vector<vector<int>> &board,int i,int n)
    {
        //base
        if(i==n)
        {
            for(int k=0;k<n;k++)
            {
                for(int l=0;l<n;l++)
                {
                    if(board[l][k]==1)
                     {   v.push_back(l+1);
                     }
                }
            }
            r.push_back(v);
            v.clear();
            
        }
        
        for(int c=0;c<n;c++)
        {
            if(issafe(board,i,c,n))
            {    
                board[i][c]=1;
                solvenqueen(board,i+1,n);
                board[i][c]=0;//backtrack
            }
        }
    }
    
    
    vector<vector<int>> nQueen(int n) 
    {
      vector<vector<int>> board(n,vector<int> (n,0));
      
      solvenqueen(board,0,n);

      sort(r.begin(),r.end());
      return r;
    }
};