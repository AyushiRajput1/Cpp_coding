brute force
------------
TC:O(N)
SC:O(1)


class Solution{
public:

    
    int getNthFromLast(Node *head, int n)
    {
        if(head==NULL)
            return -1;
        
        int s=0;
        Node* t=head;
       while(t!=NULL)
       {
            s++;
            t=t->next;
       }
    
       
        if(n>s)
            return -1;
       
       int x=-1,i=0;
       n=s-n;
       t=head;
       
       while(t!=NULL)
       {
            if(i==n)
            {    
                x=t->data;
                break;
            }
            i++;
            t=t->next;
       }
       
        return x;
    }
};
--------------------------
optimised
--------
TC:O(N)
SC:O(1)

Using two pointers:- As Nth node from the end equals to (Length - N + 1)th node from the start, Now rather than finding the exact 
position of the desired node beforehand from the head, we can make two pointers traverse simultaneously, the first pointer 
(ref_pointer) will start from the nth node from the beginning,and a pointer main_ptr  that starts from the beginning, so the ref_ptr
at last would make (Length - N + 1)th traversals(which is the position of required node from the head) , and so the main_ptr.
The main_ptr now contains the target node so we can now return the value of the same.  

Implementation
Run a loop and move a ref pointer till Nth Node .
Now start a pointer from first Node and name it as curr/main_ptr pointer.
Run a loop moving both main_ptr pointer and ref pointer until ref pointer reaches last node. 
When the ref pointer will reach the last node, the main pointer will point to the (length of linked list- n+1) postion which is the position of nth node from last but from the head of the linked list.
Now return the data of the node of the main_ptr pointer.


class Solution{
public:
    int getNthFromLast(Node *head, int n)
    {
        //using two pointers, similar to finding middle element.
        Node *currNode = head , *nthNode = head;
        
        //traversing first n elements with first pointer.
        while(n!=0)
            {
                if(currNode==NULL)
                    return -1;
                currNode = currNode->next;
                n--;
            }
        //now traversing with both pointers and when first pointer gives null 
        //we have got the nth node from end in second pointer since the first 
        //pointer had already traversed n nodes and thus had difference of n 
        //nodes with second pointer.
        while(currNode!=NULL)   
            {
                nthNode = nthNode->next;
                currNode = currNode->next;
            }
        
        //returning the data of nth node from end.
        if(nthNode!=NULL)
            return nthNode->data;
        else
            return -1;
            
    }
};