class Solution
{
    public:
    //Function to check if brackets are balanced or not.
    bool ispar(string x)
    {
        stack<char> s;
        if(x.length()<=1)
            return false;
            
        for(int i=0;i<x.length();i++)
        {
            
            char ch=x[i];
            if(ch=='('||ch=='['||ch=='{')
                s.push(ch);
            else if((ch==')' || ch=='}'|| ch==']')&& s.empty()==1)
                return false;
            else if((ch==')' && s.top()=='(')||(ch=='}' && s.top()=='{')||(ch==']' && s.top()=='['))
                s.pop();
            else //if ch=} and stack top=(
                return false;
        }
        
        if(s.empty())
            return true;
            
        return false;
    }

};

-----------
// CPP program to check for balanced brackets.
#include <bits/stdc++.h>
using namespace std;

// function to check if brackets are balanced
bool areBracketsBalanced(string expr)
{
    // Declare a stack to hold the previous brackets.
    stack<char> temp;
    for (int i = 0; i < expr.length(); i++) {
        if (temp.empty()) {
            // if the stack is empty just push the current bracket
            temp.push(expr[i]);
        }
        else if ((temp.top() == '(' && expr[i] == ')')
                 || (temp.top() == '{' && expr[i] == '}')
                 || (temp.top() == '[' && expr[i] == ']')) {
            // if we found any complete pair of bracket then pop
            temp.pop();
        }
        else {
            temp.push(expr[i]);
        }
    }
    if (temp.empty()) {
        // if stack is empty return true
        return true;
    }
    return false;
}

// Driver code
int main()
{
    string expr = "{()}[]";

    // Function call
    if (areBracketsBalanced(expr))
        cout << "Balanced";
    else
        cout << "Not Balanced";
    return 0;
}

Time Complexity: O(N) 
Auxiliary Space: O(N) for stack. 

Useful links to help you understand the concepts of this problem