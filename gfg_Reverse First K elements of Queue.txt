
queue<int> modifyQueue(queue<int> q, int k) 
{
    stack<int> s;
    queue<int> q2;
    while(k-- > 0)
    {
        s.push(q.front());
        q.pop();
    }
    
    while(!q.empty())
    {
        q2.push(q.front());
        q.pop();
    }
    
    while(!s.empty() || !q2.empty())
    {
        if(!s.empty())
        {
            q.push(s.top());
            s.pop();
        }
        else if(!q2.empty())
        {
            q.push(q2.front());
            q2.pop();
        }
    }
    return q;
}

---------------------------------------------------------
Time Complexity: O(N), as we are just popping and pushing each element of queue just 1 time.
Space Complexity: O(K), as we created an auxiliary stack and pushed K elements into them.
// Back-end complete function Template for C++

// Function to reverse first k elements of a queue.
queue<int> modifyQueue(queue<int> q, int k) {
    // using a stack and another queue to reverse first k elements.
    stack<int> s;
    queue<int> qq;

    // we pop first k elements from queue and push it in the stack.
    while (k-- > 0) {
        int a = q.front();
        q.pop();
        s.push(a);
    }

    // while stack is not empty, we push the elements into the new queue.
    while (!s.empty()) {
        int a = s.top();
        s.pop();
        qq.push(a);
    }

    // then we add rest of the elements of original queue to the new queue.
    while (!q.empty()) {
        int a = q.front();
        q.pop();
        qq.push(a);
    }

    // returning the new queue.
    return qq;
}