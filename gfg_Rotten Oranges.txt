class Solution
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& a) {
        queue<pair<int,int>> q;
        int c=0;
        for(int i=0;i<a.size();i++)
        {
            for(int j=0;j<a[i].size();j++)
            {
                if(a[i][j]==2)
                    q.push({i,j});
            }
        }
        q.push({-1,-1});
        while(!q.empty())
        {
           
            int i=q.front().first;
            int j=q.front().second;
            
            if(i==-1 && j==-1)
            {
                if(q.size()==1)
                {
                    q.pop();
                    break;
                }   
                else if(q.size()>1)
                {
                    c++;
                    q.pop();
                    q.push({-1,-1});
                }
            }  
            else
               {
                   if((i-1)>=0 && a[i-1][j]==1)
                    {
                        q.push({i-1,j});
                        a[i-1][j]=2;
                    }
                    if((j-1)>=0 && a[i][j-1]==1)
                    {
                        q.push({i,j-1});
                        a[i][j-1]=2;
                    }
                    if(j<(a[0].size()-1) && a[i][j+1]==1)
                    {
                         q.push({i,j+1});
                          a[i][j+1]=2;
                    }
                    if(i<(a.size()-1) && a[i+1][j]==1)
                    {
                         q.push({i+1,j});
                         a[i+1][j]=2;
                    }
                     q.pop();
                } 
            }
            
        for(int i=0;i<a.size();i++)
        {
            for(int j=0;j<a[i].size();j++)
            {
                if(a[i][j]==1)
                    return -1;
            }
        }
    return c;
    }
};