Time Complexity: O(n*m) where n is the length of the array and m is the length of the longest word.
Auxiliary Space: O(n*m)
class TrieNode 
{
    public:
   // char data;
    TrieNode* children[26];
    int child_no;
    bool isterminal;
    
    TrieNode()
    {
        //data=ch;
        for(int i=0;i<26;i++)
        {
            children[i]=NULL;
        }
        isterminal=false;
        child_no=0;
    }
};


class Solution
{
    public:
    
    void insertutil(TrieNode* root,string word)
    {
        if(word.length()==0)
        {
            root->isterminal=true;
            return;
        }
        
        int i=word[0]-'a';
        TrieNode* child;
        
        if(root->children[i]!=NULL)
        {
            child=root->children[i];
        }
        else
        {
            child=new TrieNode();
            root->children[i]=child;
            
        }
        root->child_no++;
        insertutil(child,word.substr(1));
    }

    
    string findpre(TrieNode* root, string &st)
    {
        string s="";
        for(int i=0;i<st.length();i++)
        {
            char ch=st[i];
            
            if(root->children[ch-'a']->child_no==1)
            {
                s+=ch;
                break;
            }
             s+=ch;
            root=root->children[ch-'a'];
           
        }
        return s;
    }
    
    vector<string> findPrefixes(string arr[], int n)
    {
        TrieNode* root=new TrieNode(); 
        vector<string> res;
        
      for(int i=0;i<n;i++)
      {
          insertutil(root,arr[i]);
      }
       
      for(int i=0;i<n;i++)
      {
          res.push_back(findpre(root,arr[i]));
      }
       
       return res;
    }
    
};
---------------------------------
//Back-end complete function Template for C++

class Solution
{
    #define s 26

    struct TrieNode
    {
        struct TrieNode* children[s];
        int count;
        bool end;
    };
    struct TrieNode* getNode()
    {
        struct TrieNode* node = new TrieNode;
        for(int i = 0; i < s; i++)
        {
            node->children[i]=NULL;
        }
        node->end=false;
        node->count=0;
        return node;
    }
    
    void insert(TrieNode* root,string key)
    {
        struct TrieNode* temp=root;
        int len = key.length();
        for(int i = 0; i < len; i++)
        {
            if(!temp->children[key[i]-'a'])
                temp->children[key[i]-'a'] = getNode();
            temp=temp->children[key[i]-'a'];
            temp->count++;
        }
        temp->end = true;
    }
    
    string search(TrieNode* root, string key)
    {
        string res;
        struct TrieNode* temp=root;
        int len=key.length();
        for(int i = 0; i < len; i++)
        {
            res.push_back(key[i]);
            temp=temp->children[key[i]-'a'];
            if(temp->count==1)
                break;
        }
        return res;
    }
        
        
        
    // Function to print all prefixes that uniquely
    // represent all words in arr[0..n-1]
    public:
    vector<string> findPrefixes(string arr[], int n)
    {
        struct TrieNode* root=getNode();
        for(int i = 0; i< n; i++)
            insert(root, arr[i]);
        
        vector<string>res;
        for(int i = 0; i < n; i++)
            res.push_back(search(root,arr[i]));
        return res;
    }
};