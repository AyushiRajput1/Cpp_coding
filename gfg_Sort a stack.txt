

void SortedStack :: sort()
{
    vector<int> v;
    while(!s.empty())
    {
        int x=s.top();
        v.push_back(x);
        s.pop();
    }
    //sort(v.begin(),v.end());
    for(int i=0;i<v.size();i++)
    {
        for(int j=i+1;j<v.size();j++)
        {
            if(v[i]>v[j])
            {
                swap(v[i],v[j]);
            }
        }
    }
    
    for(int i=0;i<v.size();i++)
    {
        s.push(v[i]);
    }
}


--------------------------------------------
Expected Time Complexity: O(N*N)
Expected Auxilliary Space: O(N) recursive.

void sortedinsert(stack<int> &s,int x)
{
    if(s.empty() || s.top()<=x)
    {   
        s.push(x);
        return;
        
    }
   int y=s.top();
   s.pop();
   sortedinsert(s,x);
   s.push(y);
}
/* The below method sorts the stack s 
you are required to complete the below method */
void SortedStack :: sort()
{
    if(s.empty())
        return;
    
    int x=s.top();
    s.pop();
    sort();
    
    sortedinsert(s,x);
}