Expected Time Complexity: O(1) for push() and O(N) for pop() (or vice-versa).
Expected Auxiliary Space: O(1) for both push() and pop().



void QueueStack :: push(int x)
{
        q1.push(x);
}

//Function to pop an element from stack using two queues. 
int QueueStack :: pop()
{
    if(q1.empty())
        return -1;
        
    while(q1.size()>1)
    {
        q2.push(q1.front());
        q1.pop();
    }
    
    int x=q1.front();
    
    q1.pop();
    
    while(!q2.empty())
    {
        q1.push(q2.front());
        q2.pop();
    }
    return x;
}
-----------------------------------------------
//Back-end complete function Template for C

//Function to push an element into stack using two queues.
void push(struct Queue *q1,struct Queue *q2,int num)
{
    //while first queue is not empty, we keep popping the front element
    //from first queue and storing that element in second queue.
    while(!isEmpty(q1))
    {
        int k = front(q1);
        
        //popping element from first queue.
        dequeue(q1);
        
        //pushing it into second queue.
        enqueue(q2,k);
    }
    
    //q1 is empty now and we push the given number into first queue.
    enqueue(q1,num);
    
    //while second queue is not empty, we keep popping the front element
    //from second queue and storing that element in first queue.
    while(!isEmpty(q2))
    {
        int k = front(q2);
        //popping element from second queue.
        dequeue(q2);
        
        //pushing it into first queue.
        enqueue(q1,k);
    }
}

//Function to pop an element from stack using two queues. 
int pop(struct Queue *q1)
{
    if(!isEmpty(q1))
    {
        //we store the front element from the queue in a 
        //variable and pop that element.
        int r = front(q1);
        dequeue(q1);
        
        //returning the popped element.
        return r;
    }
    //else we return -1.
    return -1;
}

