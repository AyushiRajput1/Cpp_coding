A Simple Approach is to find all the substrings of given string. 
For every string, check if it is a valid string or not. 
If valid and length is more than maximum length so far, 
then update maximum length.
Time complexity of this solution is O(n3).
Space Complexity: O(1)
------------
Expected Time Complexity:O(n)
Expected Auxiliary Space: O(1)  


class Solution {
  public:
    int findMaxLen(string s) 
    {
        stack <int> st;
        
        
        for(int i=0;i<s.length();i++)
        {
            if(s[i]=='(')
                st.push(i);
            else if(s[i]==')')
            {
                if(!st.empty() && s[st.top()]=='(')
                {
                    st.pop();
                }
                else
                    st.push(i);
            }
        }
        
        
         
        int m=0;
        int curr=s.length();
        
        while(!st.empty())
        {
            
            int t=st.top();
            st.pop();
            m=max(m,curr-t-1);
            curr=t;
           
        }
        
        return max(m,curr);
        
    }
};
        
         
        int m=0;
        int c=s.length();
        
        while(!st.empty())
        {
            
            int e=st.top();
             st.pop();
            m=max(m,c-e-1);
            c=e;
           
        }
        
        return max(m,c);
        
    }
};

-----------------------------
An Efficient Solution can solve this problem in O(n) time. The idea is to store indexes of previous starting brackets in a stack. The first element of the stack is a special element that provides index before the beginning of valid substring (base for next valid string). 

1) Create an empty stack and push -1 to it. 
   The first element of the stack is used 
   to provide a base for the next valid string. 

2) Initialize result as 0.

3) If the character is '(' i.e. str[i] == '('), 
   push index'i' to the stack. 
   
2) Else (if the character is ')')
   a) Pop an item from the stack (Most of the 
      time an opening bracket)
   b) If the stack is not empty, then find the
      length of current valid substring by taking 
      the difference between the current index and
      top of the stack. If current length is more 
      than the result, then update the result.
   c) If the stack is empty, push the current index
      as a base for the next valid substring.

3) Return result.
Below is the implementation of the above algorithm. 


// C++ program to find length of the
// longest valid substring
#include <bits/stdc++.h>
using namespace std;
 
int findMaxLen(string str)
{
    int n = str.length();
 
    // Create a stack and push -1 as
    // initial index to it.
    stack<int> stk;
    stk.push(-1);
 
    // Initialize result
    int result = 0;
 
    // Traverse all characters of given string
    for (int i = 0; i < n; i++)
    {
        // If opening bracket, push index of it
        if (str[i] == '(')
            stk.push(i);
         
        // If closing bracket, i.e.,str[i] = ')'
        else
        {
            // Pop the previous opening
            // bracket's index
            if (!stk.empty())
            {
                stk.pop();
            }
             
            // Check if this length formed with base of
            // current valid substring is more than max
            // so far
            if (!stk.empty())
                result = max(result, i - stk.top());
 
            // If stack is empty. push current index as
            // base for next valid substring (if any)
            else
                stk.push(i);
        }
    }
 
    return result;
}